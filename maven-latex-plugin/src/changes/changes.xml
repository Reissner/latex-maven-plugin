<document xmlns="http://maven.apache.org/changes/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/changes/1.0.0 http://maven.apache.org/xsd/changes-1.0.0.xsd">

<!-- https://maven.apache.org/plugins/maven-changes-plugin/changes.html -->
    <!-- action types: 
	 add: added functionality to the project.
	 fix: bug fix for the project.
	 update: updated some part of the project.
	 remove: removed some functionnality from the project. -->
  <properties>
    <title>Latex-Maven-Plugin</title>
    <author email="reissner@simuline.eu">Ernst Reissner</author>
  </properties>
  <body>
    <!-- Release plan: 
  For 1.6: minimal support of pythontex 
      - minimal documentation concerning xdv for xelatex. 
      - minimal documentation for best tested configuration (in readme)
      - in readme: shortcut for people which do not want to read all. 

  For 1.7: seems to be very much about xdv and dvi. 
    What is not clear to me is how important dvi is, at least there is a mime type. 
    Example: seemingly, there is no xdv viewer. 
    Also not so clear, how much of dvi can be also done with xdv transparently. 
    Only if dvi/xdv is important enough and enough can be done transparently with both formats 
    it is worth supporting both. 
    Some hints: https://en.wikipedia.org/wiki/Device_independent_file_format 
    in particular the section on related software which is essentially viewers and converters. 
    It is not at all clear that it is worth it. 
    - xdv support for xelatex, 
      in the course of this: check of options. 
      document that with xelatex 
      - there is no goal xdv. Instead, in conjunction with xelatex the goal dvi creates xdv. 
      - so both mvn latex:dvi and mvn latex:cfg with config dvi create xdv. 
      - in contrast mvn latex:xdi is not allowed. 
      - when verifying, the latex converter xxxlatex is invoked as `xxxlatex -help`. 
        This works for all. 
        Then the patterns `^-?-output-format` and `^-no-pdf` are searched. 
        An error is created if not exactly one of them is present. 
        If `^-no-pdf` is present, it is xelatex like. 
        LatexDev obtains a third device, called xdv. 
      - mvn latex:cfg reading a configuration and there also xdi is not amo
    - all the dvi to pdf converters at least of texlive are also xdv to pdf converters. 
      If run with filename without ending, they work transparently. 
      Only if both types are present, dvi and xdv, then the latter is preferred. 
      
    - rework on the readme: 
      add a section on the configuration preferred: 
      - suse tumbleweed linux
      - TeX Live, at the moment the suse version, this shall change. 
      - maven plugin, not ant task 
      - config in the pom.xml
      - only certain document classes (maybe we add some)
      Details on xelatex: it works only for pdf created directly and this only 
      because `-output-format=pdf` is not recognized and `-no-pdf` is not set. 
      For dvi, it does not work for several reasons: 
      - since `-output-format=dvi` is not recognized, a pdf is created. 
        To overcome this, instead of `-output-format=dvi` the option `-no-pdf` must be issued. 
      - if the correct option is given, then still the thing does not work, 
        because instead of dvi an exteded file format, XDV is created. 
        This is the extension which must be copied to the target folder. 
      - If pdf shall be created via dvi, i.e. xdv, then the right converter must be chosen 
        which can transform xdv into pdf. 

  For 1.8: rework on graphics, e.g. mp: 
    - more significant figure (state diagram)
    - research on dependencies 
    - Rework of according section in manual 
    - integrated version with lualatex with package luamplib and advantages: 
      use latex macros defined in the tex file 
    - alternative tikz, in particular tikz-uml. 
      Also: how is this installed. 
    - there are significant problems with updating mp files input from within mp. 
      In particular, direct in lualatex. 
      Solution is either mp directly in the tex file or input tex file, 
      but this looks bad in the editor because tex grammar expected. 
      Here some research is required. 
		xfig: rework on the description of the format xfigFormat.tex. 
		I think, creating an example figure would be fine. 
		Also listings shall be taken from this example file 
		and the compiled version shall be included as a figure. 
		Maybe a good idea to extend the .latexmkrc file already. 

		Consider all in folder MetaPostInTex. 
  
  For 2.0: document development 
      take also configuration of vscode into account. 
      This comprises support for source code and previewer. 
      write a config file for latexmk with all installations which allows to compile all documents 
      in this project, in particular the manual. 
      This includes basic latex support but also support of all graphic source formats. 
      These must be worked into the manual. 

use 
https://inkscape.org/doc/inkscape-man.html#OPTIONS
to export pages or pages of pdfs to include in the own document. 
This is useful for citations or to get pics. 

%\RequirePackage{pdfmanagement-testphase} % this will not be required in future. 
%\DocumentMetadata{pdfversion=1.7}
\documentclass{article} 

Literature: \cite{DocMetaDataSuppCode}
Note also that vscode als knows about the keys. 

Also metapost direct in lualatex via luamplib, cite {LuaMpLib}
Es gibt die Frage nach der Art wie man mp files einbindet.
Erst mal hat mpost auch eine -recorder option, die sich vielleicht auch die mit input inkludierten mp files bezieht, 
das musste man mal schauen.
Wenn man aber mit tex eine mplibcode Umgebung definiert und darin das eigentliche mp-file 
(mit intput filename in metapost) inkludiert,
dann erkennt lualatex die Abhaengigkeit nicht.
Nur wenn man ein Tex-file inkludiert das die mplibcode Umgebung enthaelt.
Dann aber passt das highlighting eben nicht, weil es ja zu tex passt und nicht zu mp.
Aus meiner Sicht ist da eine Luecke.
Die Frage ist auch, ob latex erkennt, dass eine Abhaengigkeit besteht, wenn man das mps-file mit includegraphics einbindet.
Vermutlich auch nicht.
Aehnliches Problem bei xfig mit eingebettetem jpg Bild. 

Not recognizing dependencies is an issue at work but at home it works. 
But there I have the problem, that all dependencies create extra files on the local folder.. 
No idea why. 

Example for all documentclasses to be supported: 
- book: e.g. manual
- report: not yet used 
- article: e.g. dviFomat.tex
- leaflet: missing but could contain a small marketing document 
- letter: missing 
- beamer: missing 
  This is particularly interesting, e.g. because it is widely applicable 
  and it is technically interesting: 
  - has a very special header for presentation and for handout. 
  - creates a lot of extensions: in particular xxx.<number>.vrb for pagew shich are fragile. 
    The details can be read from the manual. 
  - in beamer manual there is no hint on labels. 
    They are \begin{frame}[label={frm:someName}]


Also: meta-uml, with documentation 

  For 2.1: bib2gls                      From here on one can compile at least the twopagers 
                                        in some private project
  For 2.2: bibtex and biber
  For 2.3: xindy                        From here on, the build process is based on modern tools 
  For 3.0: source distributions (for details see according folder)
    - dependencies check, maybe based only on TeX Live 
    - depythontex if parametrized accordingly  From here on one can compile for papers 
                                               and also a certain paper the author nees 


  Note that build.xml is out of date: not all config is present. 
  in html mode: \href and \url receive a kind of dummy. 

  For 4.x: 
    Besides distribution TeX Live, also support MiKTeX 
    One has to install MiKTeX also and check comunities and options not only of tex engines 
    but also of other tools. 
    Deceicive is whether the same tools are supported. 
    Also whether tools requiring double dash also understand single dash and the other way round. 
    Also whether unknown options are really ignored. 
    This would be important if options deviate. 
    Then one can give just both variants that of texlive and that of miktex so one is understood the other not. 
    Maybe before try TeX Live with Windows. 
    transfer into maven central. 
	For 4.x: 
	 - further output formats: xml from latexml, epub. 
	   in manual: flow oriented vs page oriented. 
	   Flow oriented: html, ... epub, ... 
	   Page oriented: pdf, latex (dvi), office (odt, xdoc, ...)
	   Take multipubguide.pdf into account.
	 - Further exporters with config to access them 
	   besides latex2ht also latexml, pandoc 
	   Have a look at texnische komoedie, pdf checked in. 
	 - take pylatex into account: can there be a relation.
	 - take pythontex into account: 
	   maybe according support in separate release 
	   The converter is added already, 
	   but there is no ConverterCategory yet. 
	   Take also cleaning into account. 
	 For x.x: 
	 - complete support for pythontex when pythontex is updated. 
	 For 4.x:
	 - make capabilities inspired by latexmk: 
	   If latex is invoked with option -recorder it creates a file .fls
	   containing all the files read during its run. 
	   If this software runs latex, after that it looks for an .fls file 
	   and if found stores an .lmk file 
	   containing hashs for the files mentioned in .fls. 
	   These hashs indicate potential changes. 
	   As a first step we may use modification time. 
	   In the next run, before invoking latex, 
	   this software checks whether the .lmk file is present. 
	   If not, latex is invoked. 
	   If it is present, then it is invoked only 
	   if files is modified, including the source. 
	   We need a mechanism to know whether invoked as a maven plugin, 
	   ant task or standalone. 
	   The latter stores command line file reflecting command line options. 
	   Then also the config, e.g. pom.xml, build.xml or command line file 
	   is taken into account to detect changes. 
	   Hm, no. If something changes in pom, that is no indication. 
	   There must be a file, maybe in ~/.lmk, 
	   reflecting the options of the last run. 
	 For x.y: 
	 - meta info for this software including own version 
	   git interface 
	 - awareness of version of converters, both expected and actual 
	   Add also according testcases 
	 - this software offered also as a standalone application 
	   and as an api to integrate everywhere. 
	 - also for documentation, meta information 
	   like version but also author email and so on are vital. 
	   To that end, either git checkout script is needed 
	   or maybe latex git package. 
	   Note that there may be documentation not created through latex 
	   and so git package may not be a generic solution. 
   - version not only of converters but also on latex packages. 
     An alternative: texlive and just the version of that, 
     no additional packages or versioning only of those packages. 
     This must be evaluated... maybe difficult to handle and overkill. 
	 - include docs in jar.
	 - redesign: Target s are creational ones.
	   In mojos we also have creational ones and others.
	   The method AbstractLatexMojo.getTargetSet()
           is appropriate for creational targets only.
	   Maybe rename Target-{}->CreationalTarget,
	   and redesign: CreationalMojo.getTargetSet().
	 - There must be a mojo for phase validate or initialize
	   checking the most important things:
	 - Whether the converters mentioned are registered.
	   This refers to the commands to run and to the excluded converters.
	 - make it into maven central. Adapt manual accordingly. 
	   see https://maven.apache.org/repository/guide-central-repository-upload.html
	 - have a look at https://github.com/apache/maven-clean-plugin/ 
	   and adapt the own plugin: e.g. test harness. 
	 - https://maven.apache.org/plugins/maven-docck-plugin/
	 - The ant task cannot be created from source using ant alone, 
	   still maven is needed. 
	   One of the major problems is, that the class Settings 
	   depends on maven annotations. 
	 - bugfix: in ant task texPath cannot be used. 
	   The problem seems in Commandexecutor line 250 around: 
	   fig2dev is invoked as /home/ernst/...../fig2dev with complete path 
	   but in ant task only. 
	 - add latexmk to dependencies (because of cleaning)
	   converter is already known. 
	   TBD: add a category and maybe target clearwith latexmk, 
	   maybe also a parameter using latexmk. 
	   Also, files created by latexmk shall be cleared. 
	 - clean goal based on (categories of) coverters.
    -->
    <!-- the parameter latex2pdfCommand must be renamed: latex2devCommand, also the options and so on. -->
    <!-- TBD: rework on Converter.cmd2conv: 
	 Check also call hierarchy
	 also endow with appropriate failure handling  -->
    <!-- TBD: rework on ConverterCategories -->
    <!-- TBD: allow to exclude files from being processed, even graphic files. --> 
    <!-- TBD: bugfix: readTexSrcProcDirRec=false not respected. -->
    <!-- TBD: mention epsf like in my dissertation  -->
    <!-- TBD: Bugfix: superfluous comma in: 
	 WPP03: Skipped processing of files with suffixes [, .el]. -->



	 <!-- TBD: allow for more restrictions in versions of converters. 
		An application would be to ensure strict reproducibility 
		which requires certain diff tools but also certain versions of e.g. pdflatex. 
		Another application is that the version released by the author is not the one 
		available to the user. 
		Then (s)he should be able to use another version at own risk. 
		Another application is using pythontex which works together with latexmk only in later versions. 
		This is also a reason why also software not invoked directly could be vresion checked. 
		Other candidates could be vs code or emacs or octave or ocular. 
		To that end, expect a file named .versions.properties in the tex source directory overriding the default. 
		As info add the file versions are actually read from. 
		The rest is as now. -->

		<!-- TBD: if mvn latex:vrs is commanded and there is one tool not installed, 
			an error comes up. 
			This is not very convenient. 
			Instead, version shall be 'none'. -->

    <!-- partially still in 
	 https://www.simuline.eu/RepositoryMaven/
	 de/akquinet/jbosscc/latex/latex-maven-plugin/1.5-SNAPSHOT/ 
	 all with time stamp 2018-07-xx -->

	 <!-- "Bug report" on makeindex and xindy with consequences on makeglossaries: 
		If a term is used in the glossary only, e.g. a term x is used in the text, 
		but to explain x you need term u and this is used in the glossary only, 
		e.g. to explain x, then the call sequence 
			pdflatex, makeglossaries, pdflatex 
		wont put y into the glossary. 
		You have to use the sequence 
			pdflatex, makeglossaries, pdflatex, makeglossaries, pdflatex 
		in contrast would do. 
		The task is to find out whether an additional `makeglossaries, pdflatex` 
		is necessary and to it if needed only. 
		Note that makeglossaries is based on makeindex or xindy. 
		One has to check whether an according problem occurs with the index also. 
		There is an email from Nicola Talbot, the author of makeglossaries 
		which offers more detail information. 
	 -->
	 <!-- TBD: in particular in conjunction with pythontex, 
		latex requires a lot of memory and runs out of memory quickly. 
		So far we use pdflatex, because we are conservative. This is also the default. 
		In the long run I would like to switch to lualatex. 
		Note that certain packages are needed no longer or are even to be abandoned. 
		As a frist step I would like to specify lualatex in all internal projects 
		including phd thesis. 
		Then, if all turns out to be still working change the default value in the lnext release. 
	 -->
	<!-- document development: I think, that newly created files are removed after the run is a good thing: 
		That way, if all is clean at the beginning, at the end it is clean also without further cleaning up. 
		Also during document development intermediate files remain where they are. 
		
		On the other hand, this behavior is not so easily understood. 
		It looks as some files persist while others disappear quite randomly. 
		Thus in the manual in section on document development, 
		we need the advise to command `mvn latex:grp` if the graphics shall be needed for further development. 
		This is the sole target without cleanup. 
		This shall be done in particular when using vscode/latexworkshop 
		because otherwise, the build process fails. 
		Another option is to set in the settings <cleanUp>false</cleanUp>. 
		Check whether cleanup is skipped if an error occurs. 
		This would be fine, because it integrates with document development. 

		Maybe more thoughts on how to work in document development. 
		Use case: sth went wrong with the latex plugin. 
		Then it shall be seemless to switch to document development, 
		all created files still present. 
		Use case: changing some file triggers automatic rebuild of document development tool. 
		This is assumed to be latexmk, maybe triggered by vscode/latexworkshop. 
		Advised to use .latexmkrc file with settings consistent with those for this latex plugin. 
		
		
		. I suspect, that mvn latex:pdf really moves the pdf file to the target, 
		rather than copying it. 
		Well, all other created files, the auxiliary ones, 
		are not cleared also. 
		This makes sense for document development. 
		But then also copying the pdf instead of moving it would be more consistent. 
	-->
	<!-- TBD: seemingly, created image files are removed after successful creation, 
		whereas created auxiliary files created by latex remain in the working directory. 
		This is highly inconsistent. 
		For sake of document development, all files shall remain unchanged. 
	-->
	<!-- TBD: add support for \include: 
		Include adds aux files which this plugin does not eliminate through mvn latex:clr. 
	-->
	<!-- TBD: also  fdb_latexmk is deleted and this plugin shall do this also. -->
	<!-- TBD: clarify whether package hyperref shall be loaded for pdf output only: 
		with dvi with option [dvipdfmx]. 
		This must be done in all documents. 
	--> 
	<!-- TBD: eliminate letter size using package geometry (robustindex) -->
	
	 <!--
here is a bug affecting goal odt: 
/usr/local/texlive/2014/texmf-dist/tex/generic/pgf/systemlayer/pgfsys-tex4ht.def
89c89
 \def\pgfsys@svg@newline{{?nl}} % replacement 
- - -
 \def\pgfsys@svg@newline{\Hnewline} % original 
-->
<!-- Bugfix: WPP03: Skipped processing of files with suffixes [, .latexmkrc]. -->

<!-- gap: in pythontex package dont use \setpythontexoutputdir 
	because this is not forseen in pattern patternCreatedFromLatexMain 
also modification of working directory with \setpythontexworkingdir is not supported. 
-->

<!-- with pythontexW and depythontexW, we need unregistered converters, 
	and this is true for other converters also. 
	So Exception TSS06 in Settings.java is not appropriate. 
	We need a way to register a converter for a ConverterCategory. 
	I think, we shall copy technique of javaoctave. -->

	<!-- unlike othe converters, pythontex does not always update its result files. 
		Normally, there is a check that the result files changed. 
		It must be possible to pypass that. 
		A hack is to check the plg file. 
		Better would be some switch on activation of update check. 
		Best: tied to option -{}-rerun=always or -{}runall=true. 
		The problem is, that package options override command line options, 
		which is a bad idea. 
		To overcome, just eliminate one result file. 
		This forces pythontex to update all: a not documented feature shihc may hardlcy change. 
	-->
	<!-- TBD: full check of output: 
		This requires reading the pytxcode file to find out the names of the stdout files. -->
	<!-- 	Maybe one can eliminate package options rerun and runall. from pytxcode file. 
		That way, rerun can be controlled via command line option 
		and thus by this software invoking pythontex. -->
	<!-- TBD: use std/err output to detect rerun information, not log files: 
		this is much faster. -->

	<!-- TBD: rerunfilecheck and out files created by hyperref -->
	<!-- TBD: fix [WARNING] WPP03: Skipped processing of files with suffixes [, .latexmkrc, .log]. -->
	<!-- TBD: consider https://tex.stackexchange.com/questions/7770/file-extensions-related-to-latex-etc -->
	<!-- TBD: rework on glossaries: use `glossaries-extra` in conjunction with `bib2gls`. 
		This is because 
		- rerunfilecheck does not work with the traditional workflow. 
		- it is not easy to treat the case of cross references of glossary entries explaining one with the other term 
		- it is difficult to extend to more than one glossary 
		- ABOVE ALL: explanations and that like shall be in a separate file accessible from more than one tex file. 
		  This is like bibliographies. 
			Thus it is a good idea to have a similar workflow: lualatex, bib2gls transforming aux and bib to glotex
			one has just to replace loading `glossaries` by `glossaries-extra` with package option `record`. 

			have a look at the src/site/doc/glossary folder containing 
			- glossaries-extra and bib2gls: An Introductory Guide 
			  in particular Section 7
			- other literature is in the same folder 
			Please extend the bibliography 

			All problems mentioned above are solved: 
			- since with option `record` info is written in aux file, `rerunfilecheck` can detect changes 
			- bib2gls includes all entries referenced in the tex-file and all depending on it: 
			  so also those required for explanations, and for explanations of explanations and so on. 
			- \GlsXtrLoadResources allows to load a bib-file with entries. 
			  It is possible to load more than one resource, consult the above reference, sections 1.2 and 1.3. 
				Even with more than one index, bib2glo is invoked the same way. 

			The according section in Chapter 5 must be extended: a subsection on the new way, 
			and a section on the old way with criticism. 
			A switch legacyGlossaries which is false by default. 
	-->
  <!-- support for document development: subfiles package -->
	<!-- TBD: for xfig there is a way to convert to tikz. 
		I think, this is a single target file only and has same quality at least as we have currently. 
		I think it is worth moving from mixed tex-pdf to tikz in tex only. -->
	<!-- TBD: rework on pythontexInOut.tex -->
	<!-- .latexmkrc" 
		https://mirror.las.iastate.edu/tex-archive/support/latexmk/example_rcfiles/mpost_latexmkrc -->
		<!-- bib2gls: bib file shall start with line % Encoding: UTF-8 -->

		<!-- TBD: if an error occurred (not for warning), skip cleanup, 
			not so easy: typically more than one  latex main file -->
		<!-- TBD: in tables for parameters and warnings and so 
			frequently horizontal lines are missing. -->
		<!-- terms.bib: 
% Encoding: UTF-8

For that file a feature request to the author: shall be mentioned. 

 @entry{ME-SYSTEM,
    name={ME-System},
    plural={ME-Systeme},
    description={\cite{EN60601-1D}
    Kombination von einzelnen Geräten, wie vom \gls{HERSTELLER} festgelegt, von denen mindestens eines ein
\gls{ME-GERAET} sein muss und die durch eine \gls{FUNKTIONSVERBINDUNG}
oder durch den Gebrauch einer Mehrfachsteckdose zusammengeschlossen sind}
}
% eliminate following warning:
% warning  (pdf backend): ignoring duplicate destination with the name 'page.1'

@acronym{ecgA,
    short={ECG},
    long={Electrocardiogram}
}
-->

<!-- pythontex: improve error messages: 
$ pythontex mainsFilterAndNorms |& tee mainsFilterAndNorms.plg

This is PythonTeX 0.17
 Messages for py:default:default  
  Traceback (most recent call last):
* PythonTeX stderr - error on line 249:
    File "<outputdir>\py_default_default.py", line 61, in <module>
      samplingDescMs = SamplingDesc.fromFreqHz(sampleFreqHz, TimeUnit.msec)# ms required to reneder 0.1s=100ms% chktex 36
  NameError: name 'SamplingDesc' is not defined
PythonTeX:  mainsFilterAndNorms - 1 error(s), 0 warning(s)
		-->

		<!-- pythontex: name of folder seemingly lowercase. python with errors: folder written wit 2 ifles no stout files. -->

		<!-- besides traditional bibliography allow for biblatex. 
			In this context in a second step 
			also allow biber which is the default and is better than bibtex. 
			For details see biber.md. 
		-->

		<!-- referring to support of biblatex: mention \printbibliography[heading=bibintoc]% -->



    <!-- Bugfix for pythontex: if pythontex does not create plg file, 
    this plugin does not recognize a problem. 
    This can be done if we dont have python installed, just python3 as in modern distributions. 
    Locally we need a link python->python3 -->

    <!-- Bugfix: -shell-escape in texlive seems to be -enable-write18 in miktex. 
      Question: are there further differences? 
      If so this goes into various parts of the documentation 
      and also the latex options must be adapted accordinly. 
    -->


    <!-- https://www.texifier.com/docs/tutorials/tex/advanced/tex-vs-latex -->
    <!-- TBD: I feel I shall restrict myself to texlive distribution. 
      Then one can use kpsewhich latex.ltex to locate the distribution. 
      I suspect, that the result, in my case /usr/share/texmf/tex/latex/base/latex.ltx, 
      indicates the base directory, here /usr/share/texmf. 
      Note that also mktexlsr is available for texlive. 
      versions can be found easily 
      'kpsewhich -version' 'kpsewhere -version' and 'mktexlsr -version'. 
      First line of answer is 'kpathsea version 6.3.4'
      and 'mktexlsr version revision 62699 (2022-03-14 10:53:53 +0100)'. 
      Location of the distribution may help to check reproducible results. 

      Search also for other kpse commands. 
      For miktex consider 'findtexmf'
    -->

    <!-- Check whether the following really works with mpost but not with lualatex 
      included directly with luamplib: 

      beginfig(2)
        z1=(0,0);  z2=(10,20);
        z3=(10,0); z4=(0,10);
        draw z1 - - z2;  draw z3 - - z4;
        def
          det(expr a,b) = (xpart a * ypart b - ypart a * xpart b)
        enddef;
        l:=det(z3-z1,z3-z4)/det(z2-z1,z3-z4);
        z5=l[z1,z2];
        %pickup pencircle scaled 4pt;
        %drawdot z5;
        drawdot z5 withpen pencircle scaled 4pt;
      endfig;
      end
    -->

    <!-- see DetermineTexMainFile -->

  <!-- 
    i know that %!TEX directives are meta data used by development requirements, 
    % !TEX TS-program = pdflatex
% !TEX encoding = UTF-8 Unicode 
but maybe this can be taken into account when compiling. 
e.g. by setting the latex compiler and some options. 
It may also serve as mark for latex main files as suggested in detMainFile.md. 
Maybe with warning that deviating from default. 

According to the texworks manual the following magic comments are supported. 
!TeX
encoding, 26
program, 26
root, 17
spellcheck, 27
  -->

  <!-- in pom we have config of latex plugin. 
  We neither use for all of test pom, nor for all of latex nor for code generation at all. 
  This could be changed. 
  -->

  <!-- xelatex support; better read available options -->

  <!-- fig2dev: maybe lange mp (metapost) is superior to mixed latex and pdf -->

  <release  version="1.8"
  date="2022-04-20"
      description="Essentially, made all documents compilable with latexmk">
      <action dev='reissner' type='fix'>
        goal vrs works again. 
      </action>
      <action dev='reissner' type='add'>
        support xdv format. 
        In particular added warning WLP07. 
      </action>
  </release>
  <release  version="1.7"
      date="2022-04-19"
      description="Essentially, made all documents compilable with latexmk">
      <action dev='reissner' type='fix'>
        Extracted chapters from manual, renamed manual: 
        shorter name, now pythontex works with latexmk. 
        This is a workaround for a bug either in latexmk or in lualatex. 
        All works fine for other latex engines. 
      </action>
      <action dev='reissner' type='fix'>
        Corrected .latexmkrc. Now works at least for pythontexInOut, 
        but not for the manual still... no idea why
      </action>
      <action dev='reissner' type='fix'>
        Eliminated bad boxes
      </action>
       <action dev='reissner' type='update'>
        In .gitignore eliminated files created by pythontex 
        which were silently vital for success of tests. 
        Not before now we have quality assured. 
      </action>
       <action dev='reissner' type='update'>
        Eliminated dependency on emacs and auctex. 
        This affects also .gitignore. 
      </action>
      <action dev='reissner' type='update'>
        In pom now documentation is created with version 1.6 
        including pythontex. 
      </action>
    </release>
	  <release  version="1.6"
		date="2022-04-16"
		description="Main feature: minimum support for pythontex. 
		Added support for unregistred converters. 
		Added inclusion/exclusion of latex main files.">
      <action dev='reissner' type='add'>
      extracted new way to determine the latex main file 
      from changex.xml into detMainFile.md. 
      This preparatory for the next release. 
      </action>
      <action dev='reissner' type='update'>
      pom: version updates
      </action>
      <action dev='reissner' type='add'>
        metadata: tried on pdfversion and added documentation
      </action>
      <action dev='reissner' type='fix'>
        reworked manuals so that they compile for any tex engine 
        and also for htlatex. 
      </action>
      <action dev='reissner' type='add'>
        extended and restructured backlog for further releases. 
      </action>
      <action dev='reissner' type='add'>
      added config for vscode, the new editor. 
      </action>
      <action dev='reissner' type='add'>
        added a lot of external documentation and also restructured. 
        This affects also the literature file lit.bib. 
        Focus is on engines, recorder option, distributions, metapost, ... 
      </action>
      <action dev='reissner' type='fix'>
        including xdv alongside dvi on a minimum effort base. 
        Still preparing a better support. 
      </action>
      <action dev='reissner' type='add'>
			added document recorder.tex and its artifact. 
			</action>
      <action dev='reissner' type='add'>
        added document latexEngines.tex and its artifact. 
        Gained an overview over the tex engines above all xelatex
      </action>
      <action dev='reissner' type='add'>
				added documentation for pythontex and depythontex 
				going beyond the manual but needed for implementation of this software. 
				Added references to original software by Poore
				</action>
				<action dev='reissner' type='add'>
				added BuildFailureException TLP02
			</action>
			<action dev='reissner' type='add'>
				added latexmkrc to support document development better. 
			</action>
			<action dev='reissner' type='add'>
				added invocation of pythontex (depythontex not yet) 
				including documentation. 
				This is the core functionality for this release. 
			</action>
			<action dev='reissner' type='add'>
				added converter depythontex (pythontex was added already.)
			</action>
			<action dev='reissner' type='fix'>
				Generalized default value for patternLatexMainFile
				taking package names into account which contain `-` in addition to letters.
			</action>
			<action dev='reissner' type='update'>
				Turned lualatex into the default.
				This is a kind of update because the former default pdflatex starts to outdate.
				Nevertheless, a strong motivation is pythontex:
				I want to create figures without memory restrictions, which is offered by lualatex.
			</action>
			<action dev='reissner' type='update'>
				Updated versions, version patterns and strings, also form e.g. inkscape, pdftotext, pdfinfo, exiftool, gnuplot.
			</action>
			<action dev='reissner' type='add'>
				Added support for unregistered converters specifying their category for safety.
				This is needed for the moment for (de-)pythontex.
				Although removed in later releases is useful in its own right.
			</action>
			<action dev='reissner' type='add'>
				Added parameters 'mainFilesIncluded' and 'mainFilesExcluded' 
				and added according warnings WPP05, WPP06 and WPP07. 
			</action>
		</release>

    <release version="1.5"
	     date="2022-05-03"
	     description="First release with change management. 
			  This includes version of this software 
			  but also of the converters used.">
			 <action dev='reissner' type='add'>
				 Added check for reproducibility. 
				 This is a step towards a clean release management 
				 as this shall remove the dependency of this plugin to itself, 
				 potentially the same version. 
			 </action>
       <action dev="reissner" type="add">
	 Added VersionMojo to phase validate.
	 To that end, added configuration versionsWarnOnly
	 and convertersExcluded.
       </action>
       <action dev="reissner" type="add">
         Added validity checks on converters: registered, in correct category.
	 In the course of this, added a lot of exceptions:
	 TSS05, TSS06, TSS07 and TSS08
       </action>
       <action dev="reissner" type="add">
          Prepared for check in phase validate or initialize:
	  Added a way to exclude converters.
       </action>
       <action dev="reissner" type="add">
         Added rudimentary change management. 
       </action>
       <action dev="reissner" type="add">
         Added a readme.md file. 
       </action>
       <action dev="reissner" type="update">
         Converter gnuplot from gp to pdf changed version
		 and command line interface.
		 Likewise for inkscape, the converter from svn to pdf.
		 Added according manuals.
		 Updated converters again and again. 
       </action>
       <action dev="reissner" type="fix">
         Aligned licenses: eliminated contradictions:
		 License delivered is what is given top level on github. 
       </action>
       <action dev="reissner" type="add">
         Handling of versions: now in a separate resource file
		 for access from markdown, latex and java (the latter to come). 
		 Also updated several times
		 and proved for now that the format is useful.
		 Among the changes: 
       </action>
       <action dev="reissner" type="update">
         Updated a lot of versions in pom. 
       </action>
       <action dev="reissner" type="fix">
         Eliminated most of the javadoc failures. 
       </action>
       <action dev="reissner" type="add">
         Use maven enforcer plugin. 
       </action>
       <action dev="reissner" type="add">
         added docs for various packages. 
       </action>
       <action dev="reissner" type="add">
         added goal vrs displaying versions also of the converters 
         and whether they are valid. 
       </action>
       <action dev="reissner" type="add">
         added exception TSS04 checking validity of targets.
       </action>

      <!-- somehwere in the intro of tikz manual, it is said that metafont is now part of luatex. 
				This may mean that no two compilation steps are required. 
				Please check -->
			 <!-- this package shall provide a default .latexmkrc file 
			and also a default input file loading all required packages. 
			Both shall be appropriate for the default config, i.e. using lualatex, biber... 
			but also for all relevant documentclasses
		See the twoPager in L2R for class leaflet: package geometry shall not be loaded. -->
       <!-- in manual fix underfull boxes and pdf version -->
       <!-- change name of plugin: latex-maven-plugin
	    This is not completed. Shall be set up both in folder structure 
	    and in github url given by pom.       -->
       <!-- further actions are given in the Readme.md -->
       <!-- TBD: include also hints in the manual. -->
       <!-- to offer standalone application: 
	    have a look at maven-jar-plugin documentation 
	    still commented out to make the jar executable. -->
       <!-- update to newer java version. e.g. define modules, packagedocs -->
       <!-- on site http://www.simuline.eu/LatexMavenPlugin 
	    set up a download area. 
	    Some of them are written by myself as xfig and dvi. 
	    For these the reference howpublished in lit.bib must be updated. 
       -->
       <!-- manual on dvi file format requires rework: 
	    no word about version and no word about dvitype program. 
	    Partially german english. -->
       <!-- test pandoc - -bibliography - -toc -s -R
	    s stands for standalone 
	    R stands for resolve, also try without 
	    and try to find a solution for indices and glossaries 
	    seemingly, currently not supported, anyway 
	    Try formulae with mathml and with mathjax 
	    What about tables, listings, figures?
       -->
       <!-- take texnische komoedie into account 
	    to evaluate the ways html export can be done -->
       <!-- latexml is interesting not only for html export 
	    but also for further analysis of tex files. 
	    Desirable: a SAX like interface. 
	    This could be interesting for all kinds of latex converters. -->
       <!-- test latexml
	    $ latexml -{}-dest beispiel.xml beispiel.tex
	    $ latexmlpost -{}-format=html4 -{}-mathimages -dest=bsp.html bsp.xml
       -->
       <!-- evaluate biblatex to replace bibtex. 
	    This also offers entry type @standard and rework bibliography -->
       <!-- support epub -->
       <!-- work through pdf: eine texnische kommödie --> 
       <!--  sources in package org.codehaus.plexus.util and subpackage 
       are given explicitly. 
       Maybe this shall be a dependency instead. 
       On the other hand, for standalone application, 
       this shall be included in the jar. 
       But if another version of these sources come on the classpath, 
       there is a version clash. 
       TBD: research how this can be avoided.  -->
       <!-- versions better in pom properties 
       than in separate file i feel. 
       But this would require improved maven-properties-plugin 
       so this kind of solution is deferred but shall be resumed asap.  -->
       <!-- TBD: update the site created by mvn site-deploy. 
	    There are even still parts referring to acquinet. -->
       <!-- TBD: the site docs is partially in apt 
	    which seems close to markdown. 
	    Maybe we can replace. 
	    What is needed is an evaluation of the formats: 
	    docbook, apt, xdoc, markdown. 
	    Partially apt seems superior to markdown. 
	    On the other hand, unification is necessary. 
	    Also important: does the site plugin support markdown? -->
       <!-- TBD: complete rework for ant users: 
	    starting from how to google and how to find sites. 
	    Are all references present? 
	    Does the software work properly? -->
       <!-- TBD: add this plugin to mavencentral 
	    This allows some simplification, also to documentation -->
       <!-- TBD: collect Todos given in manual -->
       <!-- TBD: eliminate underfull \vbox es in manual -->
       <!-- TBD: eliminate warning: pdflatex found version 1.7 
	    allowed 1.5 only -->
       <!-- TBD: goal vrs can give more than versioning info, 
	    as e.g. vendor and things like that. -->
       <!-- TBD: vrs may be tied to lifecycle phase 
	    validate or better pre-site. 
	    but then it must be possible to choose the converters active. -->
       <!-- TBD: if the active converters are configurable, 
	    then one has to ensure that only the configured are used. -->
       <!-- TBD: fill in the gap given by tool makeindex: 
	    does not allow to get its version without breaking it 
	    or applying it on a file. 
	    Maybe the solution is to replace it by upmendex -->
       <!-- TBD: goal latex:vrs 
	    shall work even if not all converters are installed. 
	    Problem: MetaInfo.Version constructor: 
	    executor then throws BuildFailureException -->
       <!-- TBD: maybe vrs shall be included in phase validate. -->
       <!-- TBD: ant-task: somehow synchronize coordinates with pom: 
	    name, version -->

       <!-- setting readTexSrcProcDirRec seems to refer to processing graphics only. 
	    Check whether this is appropriate. -->
       <!-- TBD: rework on Converter.java: diff-pdf has pseudo version only. -->
       <!-- TBD: Converter.java: there is an unspecific ConverterCategory: eliminate. -->
       
			 <!-- TBD: reproducible runs: take other output formats into account also: 
				at least html. -->
     </release>


     
     <!-- Here starts version 1.4 -->
     <!-- Re-hosted in 
	  https://www.simuline.eu/RepositoryMaven/
	  de/akquinet/jbosscc/latex/latex-maven-plugin/ -->
     <release version="1.4" 
	     date="2018-06-19" 
	     description="TBD">
      <action dev="reissner" type="add">
        added goal help
       </action>
      <action dev="reissner" type="update">
        email address: ernst.reissner@simuline.eu,
	site org.m2latex --> eu.simuline.m2latex also repo
       </action>
      </release>

     <!-- 1.3 does not exist!!! -->
     <!-- Re-hosted in 
	  https://www.simuline.eu/RepositoryMaven/
	  de/akquinet/jbosscc/latex/latex-maven-plugin/ -->
      <release version="1.3" 
	      date="2016-09-09" 
	      description="Renamed plugin">
       <action dev="reissner" type="update">
         Renamed plugin due to new convention into latex-maven-plugin
	 and changed version. (without release plugin)
	 CAUTION: Thus no snapshot release was created
	 and so there is more than one checkin with a release version,
	 i.e. no snapshot. 
       </action>
       <action dev="reissner" type="update">
         Updated java version to 1.5,
	 replaced javadoc tags by annotations,
	 updated junit to 4.12,
	 replaced easymock by mockito,
	 updated all to eu.simuline.m2latex
       </action>
       <action dev="reissner" type="add">
	 Made rerun mechanism configurable:
	 added parameter patternNeedAnotherLatexRun
	 containing a pattern to regocnize need to rerun from log file
	 and added parameter maxNumReruns signifying a maximum number of reruns.
       </action>
       <action dev="reissner" type="add">
	 added parameter tex4htOutputDirectory
       </action>
       <action dev="reissner" type="add">
	 added conversion to rtf via latex2rtf and parameter latex2rtfCommand
       </action>
       <action dev="reissner" type="add">
	 added conversion to odt and docx also via htlatex and dot2doc
	 adding parameter odt2docCommand
       </action>
      <action dev="reissner" type="add">
	added conversion of document to dvi and ps and
	conversion of graphic to eps besides pdf 
       </action>
       <action dev="reissner" type="add">
	 added conversion to txt via pdftotext with parameter pdf2txtCommand
       </action>
       <action dev="reissner" type="add">
	 added support for makeindes along the same lines as bibtex
	 also multiple indices and split ones.
	 added glossaries 
	 adding parameters makeIndexCommand
       </action>
       <action dev="reissner" type="add">
	 now in one run conversion in many formats can be done
	 and made configurable through the parameter targets.
	 There are goals to create a specified output format
	 e.g running mvn latex:pdf
	 or all formats configured by mvn latex:cfg
       </action>
       <action dev="reissner" type="add">
	 added detection of failures and warnings for latex, htlatex
	 auxiliary programs like bibtex.
	 In particular added parameters patternErrLatex,
	 patternErrMakeindex

	 Made display of warnings and box-warnings over/underfull configurable
	 adding parameters debugWarnings and debugBadBoxes
	 Detected errors and warnings on conversions 
	 due to monitoring of files to be created.
	 TBD: just mere existence, but could be also modification time.

	 Added warnings on files skipped. 
       </action>
        <action dev="reissner" type="add">
	 added handling of toc, listoffigures, listoftables, listoflistings 
       </action>
       
       <action dev="reissner" type="add">
	 added support for new graphic formats fig, gnuplot, jpg, png, svg 
	 with parameters fig2devCommand, 
       </action>
      <action dev="reissner" type="add">
	 added selection of latex documents from all files with ending .tex
       </action>
       <action dev="reissner" type="add">
	 added javadoc plugin 
       </action>
      <action dev="reissner" type="add">
	added ant tasks besides the maven plugin
	dividing the software in mojos defining a mavan plugin,
	ant tasks and core classes in separate packages. 
       </action>
     <action dev="reissner" type="add">
       added a manual written in tex and to be compiled
       by this plugin and by ant task defined  here. 
       </action>
     <action dev="reissner" type="add">
       added documentation of latex pacakges, tools,
       and file formats including self written ones on fig and dvi. 
       </action>
    <action dev="reissner" type="add">
       processing in source directories
       which is considered the working directory
       and move of results into target directory.
       Also clean goal and task to restore the source directory.
       This eases development of latex files considerably
       because one can invoke the needed tools directly
       without using this plugin/task.
       Also one can use forward/backward search between editor and viewer.
       But the viewer has to be in the source directory then.
       Nevertheless cleaning up works. 
       </action>
    <action dev="reissner" type="add">
      added goal/task clear.
      Added goals grp (graphics) and chk (check)
       </action>

     </release>

     
     <!-- jars not in https://www.simuline.eu/RepositoryMaven/ but still in 
	  https://repo.maven.apache.org/maven2/
	  de/akquinet/jbosscc/latex/maven-latex-plugin/ -->
     <!-- Sources in https://github.com/akquinet/maven-latex-plugin -->
     <release version="1.2" 
	     date="2012-02-07" 
	     description="TBD">
     </release>

    <!-- TBD: added older changes -->
  </body>
</document>
